---
import { type CollectionEntry, getCollection, render } from "astro:content";
import { Image } from "astro:assets";

import BaseLayout from "@/layouts/BaseLayout.astro";

import SeoPost from "@/components/SeoPost.astro";
import TableOfContents from "@/components/TableOfContents.astro";
import ShareButtons from "@/components/ShareButtons.astro";
import Giscus from "@/components/Giscus.astro";

import { formatDate, calculateReadingTime, slugifyAuthor } from "@/lib/util";
import { SITE } from "@/siteConfig";

interface Props {
  entry: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const blog = await getCollection("blog");
  return blog.map((entry) => ({
    params: { id: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await render(entry);
const readingTime = calculateReadingTime(entry.body || "");
---

<BaseLayout>
  <SeoPost
    slot="head"
    {entry}
  />
  <div class="blog-post-container">
    <div class="blog-header mb-6">
      {
        entry.data.image && (
          <Image
            src={entry.data.image}
            alt={entry.data.imageAlt || ""}
            class="mb-12 h-auto w-full"
            draggable="false"
          />
        )
      }
      <h1 class="text-[36px] leading-snug font-bold text-balance">
        {entry.data.title}
      </h1>
      {
        entry.data.tags && entry.data.tags.length > 0 && (
          <div
            class="mt-2 flex flex-wrap gap-2 sm:hidden"
            aria-label="Post tags">
            {entry.data.tags.map((tag) => (
              <a
                href={`/tags/${encodeURIComponent(tag)}`}
                title={tag}
                class="inline-flex items-center rounded-full bg-neutral-200 px-3 py-1 text-xs font-medium text-neutral-700 dark:bg-neutral-800 dark:text-neutral-200">
                {tag}
              </a>
            ))}
          </div>
        )
      }
      <div class="text-muted-text dark:text-dark-muted-text mt-2 flex items-center justify-between">
        <div class="flex flex-col sm:flex-row sm:items-center sm:gap-1.5">
          <span>{formatDate(entry.data.publicationDate)}</span>
          {
            entry.data.authors && entry.data.authors.length > 0 && (
              <>
                <span class="hidden text-sm sm:inline">â€¢</span>
                <span class="text-sm">
                  By{" "}
                  {entry.data.authors.map((a, idx) => (
                    <>
                      {idx > 0 && (idx === entry.data.authors!.length - 1 ? " and " : ", ")}
                      <a
                        href={`/authors/${slugifyAuthor(a)}`}
                        class="underlined"
                        title={a}>
                        {a}
                      </a>
                    </>
                  ))}
                </span>
              </>
            )
          }
        </div>
        <span class="hidden sm:inline">{readingTime}</span>
      </div>
      {
        entry.data.tags && entry.data.tags.length > 0 && (
          <div
            class="mt-3 hidden flex-wrap gap-3 sm:flex"
            aria-label="Post tags">
            {entry.data.tags.map((tag) => (
              <a
                href={`/tags/${encodeURIComponent(tag)}`}
                title={tag}
                class="inline-flex items-center rounded-full bg-neutral-200 px-3 py-1 text-xs font-medium text-neutral-700 transition-transform duration-150 ease-out hover:scale-[102.75%] dark:bg-neutral-800 dark:text-neutral-200">
                {tag}
              </a>
            ))}
          </div>
        )
      }
    </div>

    <div class="blog-content-wrapper lg:grid lg:grid-cols-4 lg:gap-10">
      <aside class="hidden lg:col-span-1 lg:block">
        <TableOfContents content={entry.body || ""} />
      </aside>

      <article class="lg:col-span-3">
        <div class="mb-8 lg:hidden">
          <TableOfContents content={entry.body || ""} />
        </div>

        <div
          class="prose mx-auto max-w-none lg:mx-0"
          id="blog-content">
          <Content />
        </div>

        <ShareButtons
          title={entry.data.title}
          url={`${SITE.href.replace(/\/$/, "")}/blog/${entry.id}`}
          description={entry.data.description}
        />

        <Giscus class="mt-12" />
      </article>
    </div>
  </div>
</BaseLayout>

<script>
  function highlightSearchTerm() {
    const urlParams = new URLSearchParams(window.location.search);
    const searchTerm = urlParams.get("search");

    if (!searchTerm) return;

    const blogContent = document.getElementById("blog-content");
    if (!blogContent) return;

    const contentText = blogContent.textContent || "";
    const searchTermLower = searchTerm.toLowerCase();
    const contentContainsSearchTerm = contentText.toLowerCase().includes(searchTermLower);

    if (!contentContainsSearchTerm) return;

    function escapeRegExp(string: string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }

    function highlightTextNode(textNode: Text, searchText: string) {
      const parent = textNode.parentNode;
      if (!parent) return;

      const text = textNode.textContent || "";
      const escapedSearchText = escapeRegExp(searchText);
      const regex = new RegExp(`(${escapedSearchText})`, "gi");

      if (regex.test(text)) {
        const highlightedHTML = text.replace(regex, '<mark class="search-highlight">$1</mark>');
        const tempDiv = document.createElement("div");
        tempDiv.innerHTML = highlightedHTML;

        const fragment = document.createDocumentFragment();
        while (tempDiv.firstChild) {
          fragment.appendChild(tempDiv.firstChild);
        }
        parent.replaceChild(fragment, textNode);
      }
    }

    function walkTextNodes(node: Node) {
      if (node.nodeType === Node.TEXT_NODE) {
        highlightTextNode(node as Text, searchTerm!);
      } else {
        if (
          node.nodeType === Node.ELEMENT_NODE &&
          (node as Element).classList?.contains("search-highlight")
        ) {
          return;
        }

        const children = Array.from(node.childNodes);
        children.forEach((child) => walkTextNodes(child));
      }
    }

    walkTextNodes(blogContent);

    setTimeout(() => {
      const firstHighlight = document.querySelector(".search-highlight");
      if (firstHighlight) {
        firstHighlight.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });

        setTimeout(() => {
          document.dispatchEvent(new CustomEvent("search-highlighting-complete"));
        }, 200);
      }
    }, 100);
  }

  document.addEventListener("astro:page-load", highlightSearchTerm);

  if (document.readyState !== "loading") {
    highlightSearchTerm();
  }
</script>
