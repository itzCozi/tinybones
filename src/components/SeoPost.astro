---
import { SITE } from "@/siteConfig";

const { entry } = Astro.props as { entry: any };
const post = entry as any;

const postTitle = post.data.title || SITE.title;
const postDescription = post.data.description || SITE.description;
const url = new URL(Astro.url.pathname, SITE.href).toString();
const dynamicOg = new URL(`/og/${post.id}.png`, SITE.href).toString();
const imageUrl =
  post?.data?.image?.src ? new URL(post.data.image.src, SITE.href).toString() : dynamicOg;
const authorsList = post.data.authors?.length ? post.data.authors : [SITE.author];
const tagsList = post.data.tags ?? [];
const datePublishedVal =
  post.data.publicationDate?.toISOString?.() ? post.data.publicationDate.toISOString() : undefined;

const articleLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: postTitle,
  description: postDescription,
  url,
  mainEntityOfPage: url,
  inLanguage: SITE.locale,
  image: imageUrl ? [imageUrl] : undefined,
  datePublished: datePublishedVal,
  dateModified: datePublishedVal,
  author: authorsList.map((name: string) => ({ "@type": "Person", name })),
  keywords: tagsList.length ? tagsList.join(", ") : undefined,
} as const;

const breadcrumbsLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Home",
      item: new URL("/", SITE.href).toString(),
    },
    {
      "@type": "ListItem",
      position: 2,
      name: "Blog",
      item: new URL("/blog", SITE.href).toString(),
    },
    {
      "@type": "ListItem",
      position: 3,
      name: "Projects",
      item: new URL("/projects", SITE.href).toString(),
    },
  ],
} as const;
void articleLd;
void breadcrumbsLd;
---

<title>{`${postTitle} | ${SITE.title}`}</title>
<meta
  name="title"
  content={`${postTitle} | ${SITE.title}`}
/>
<meta
  name="description"
  content={postDescription}
/>
<link
  rel="canonical"
  href={url}
/>

<meta
  property="og:title"
  content={postTitle}
/>
<meta
  property="og:description"
  content={postDescription}
/>
<meta
  property="og:image"
  content={imageUrl}
/>
<meta
  property="og:image:alt"
  content={postTitle}
/>
<meta
  property="og:type"
  content="article"
/>
<meta
  property="og:locale"
  content={SITE.locale}
/>

<meta
  name="twitter:title"
  content={postTitle}
/>
<meta
  name="twitter:description"
  content={postDescription}
/>
<meta
  property="twitter:image"
  content={imageUrl}
/>
<meta
  name="twitter:image:alt"
  content={postTitle}
/>
<meta
  name="twitter:card"
  content="summary_large_image"
/>

{
  post?.data.tags &&
    post.data.tags.map((tag: string) => (
      <meta
        property="article:tag"
        content={tag}
      />
    ))
}

<script
  is:inline
  type="application/ld+json"
  set:html={JSON.stringify(articleLd, (_, value) => (value === undefined ? undefined : value))}
/>

<script
  is:inline
  type="application/ld+json"
  set:html={JSON.stringify(breadcrumbsLd, (_, value) => (value === undefined ? undefined : value))}
/>
