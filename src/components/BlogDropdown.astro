---
import { getCollection } from "astro:content";
import { Menu } from "lucide-astro";

const allPosts = (await getCollection("blog")).sort(
  (a, b) => b.data.publicationDate.valueOf() - a.data.publicationDate.valueOf()
);

const recentPosts = allPosts.slice(0, 5);
---

<div class="relative inline-block text-left">
  <button
    id="blog-dropdown-button"
    type="button"
    class="mt-1.5 text-sm font-medium hover:cursor-pointer"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <Menu class="h-5 w-5 transition-transform duration-200" id="blog-dropdown-icon" />
  </button>

  <div
    id="blog-dropdown-menu"
    class="absolute left-0 mt-2 w-80 max-h-80 overflow-y-auto origin-top-left rounded-md bg-white dark:bg-neutral-950 ring-1 ring-black/20 dark:ring-white/20 ring-opacity-5 focus:outline-none z-50 hidden"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="blog-dropdown-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {recentPosts.length > 0 ? (
        <>
          {recentPosts.map((post, index) => (
            <a
              href={`/blog/${post.id}`}
              class="block px-4 py-3 text-sm hover:bg-neutral-100/70 dark:hover:bg-neutral-900/70 transition-colors duration-150 border-b border-neutral-200 dark:border-neutral-700 last:border-b-0"
              role="menuitem"
              tabindex="-1"
            >
              <div class="font-medium truncate">{post.data.title}</div>
              <div class="text-xs mt-1">
                {post.data.publicationDate.toLocaleDateString()}
              </div>
            </a>
          ))}
            <a
              href="/blog"
              class="block px-4 py-3 text-sm link"
              role="menuitem"
              tabindex="-1"
            >
              View all posts â†’
            </a>
        </>
      ) : (
        <div class="px-4 py-3 text-sm">
          No blog posts found
        </div>
      )}
    </div>
  </div>
</div>

<script>
  function initBlogDropdown() {
    const button = document.getElementById('blog-dropdown-button');
    const menu = document.getElementById('blog-dropdown-menu');
    const icon = document.getElementById('blog-dropdown-icon');

    if (!button || !menu || !icon) return;

    const newButton = button.cloneNode(true);
    button.parentNode?.replaceChild(newButton, button);

    const freshButton = document.getElementById('blog-dropdown-button');
    const freshMenu = document.getElementById('blog-dropdown-menu');
    const freshIcon = document.getElementById('blog-dropdown-icon');
    
    if (!freshButton || !freshMenu || !freshIcon) return;

    freshButton.addEventListener('click', (e) => {
      e.stopPropagation();
      const isExpanded = freshButton.getAttribute('aria-expanded') === 'true';
      
      if (isExpanded) {
        closeDropdown();
      } else {
        openDropdown();
      }
    });

    document.addEventListener('click', (e) => {
      if (!freshButton.contains(e.target as Node) && !freshMenu.contains(e.target as Node)) {
        closeDropdown();
      }
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });

    function openDropdown() {
      if (!freshMenu || !freshButton || !freshIcon) return;
      freshMenu.classList.remove('hidden');
      freshButton.setAttribute('aria-expanded', 'true');
      freshIcon.style.transform = 'rotate(180deg)';
    }

    function closeDropdown() {
      if (!freshMenu || !freshButton || !freshIcon) return;
      freshMenu.classList.add('hidden');
      freshButton.setAttribute('aria-expanded', 'false');
      freshIcon.style.transform = 'rotate(0deg)';
    }
  }

  document.addEventListener('astro:page-load', initBlogDropdown);
  
  if (document.readyState !== 'loading') {
    initBlogDropdown();
  }
</script>
