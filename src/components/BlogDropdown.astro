---
import { getCollection } from "astro:content";
import { Menu } from "lucide-astro";

const allPosts = (await getCollection("blog")).sort(
  (a, b) => b.data.publicationDate.valueOf() - a.data.publicationDate.valueOf(),
);

const recentPosts = allPosts.slice(0, 5);
---

<div class="relative inline-block text-left">
  <button
    id="blog-dropdown-button"
    type="button"
    class="mt-1.5 text-sm font-medium hover:cursor-pointer"
    aria-expanded="false"
    aria-haspopup="true"
    aria-controls="blog-dropdown-menu"
    aria-label="Open recent blog posts menu">
    <Menu
      class="mt-0.5 h-5.5 w-5.5 transition-transform duration-200"
      id="blog-dropdown-icon"
    />
  </button>

  <div
    id="blog-dropdown-menu"
    class="ring-opacity-5 absolute left-0 z-50 mt-2 hidden max-h-80 w-80 origin-top-left overflow-y-auto rounded-md bg-white ring-1 ring-black/20 dark:bg-neutral-950 dark:ring-white/20"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="blog-dropdown-button"
    tabindex="-1">
    <div
      class="py-1"
      role="none">
      {
        recentPosts.length > 0 ?
          <>
            {recentPosts.map((post) => (
              <a
                href={`/blog/${post.id}`}
                class="block border-b border-neutral-200 px-4 py-3 text-sm transition-colors duration-150 last:border-b-0 hover:bg-neutral-100/70 dark:border-neutral-700 dark:hover:bg-neutral-900/70"
                role="menuitem">
                <div class="truncate font-medium">{post.data.title}</div>
                <div class="mt-1 text-xs">{post.data.publicationDate.toLocaleDateString()}</div>
              </a>
            ))}
            <a
              href="/blog"
              class="link block px-4 py-3 text-sm"
              role="menuitem">
              View all posts
            </a>
          </>
        : <div class="px-4 py-3 text-sm">No blog posts found</div>
      }
    </div>
  </div>
</div>

<script>
  function initBlogDropdown() {
    const button = document.getElementById("blog-dropdown-button");
    const menu = document.getElementById("blog-dropdown-menu");
    const icon = document.getElementById("blog-dropdown-icon");

    if (!button || !menu || !icon) return;

    const newButton = button.cloneNode(true);
    button.parentNode?.replaceChild(newButton, button);

    const freshButton = document.getElementById("blog-dropdown-button");
    const freshMenu = document.getElementById("blog-dropdown-menu");
    const freshIcon = document.getElementById("blog-dropdown-icon");

    if (!freshButton || !freshMenu || !freshIcon) return;

    freshButton.addEventListener("click", (e) => {
      e.stopPropagation();
      const isExpanded = freshButton.getAttribute("aria-expanded") === "true";

      if (isExpanded) {
        closeDropdown();
      } else {
        openDropdown();
      }
    });

    document.addEventListener("click", (e) => {
      if (!freshButton.contains(e.target as Node) && !freshMenu.contains(e.target as Node)) {
        closeDropdown(false);
      }
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        closeDropdown();
      }
    });

    freshButton.addEventListener("keydown", (e) => {
      if ((e as KeyboardEvent).key === "ArrowDown") {
        e.preventDefault();
        openDropdown();
        focusFirstItem();
      }
    });

    freshMenu.addEventListener("keydown", (e) => {
      const evt = e as KeyboardEvent;
      const items = getMenuItems();
      const currentIndex = items.indexOf(document.activeElement as HTMLElement);

      if (evt.key === "ArrowDown") {
        evt.preventDefault();
        const next = items[(currentIndex + 1) % items.length];
        next?.focus();
      } else if (evt.key === "ArrowUp") {
        evt.preventDefault();
        const prev = items[(currentIndex - 1 + items.length) % items.length];
        prev?.focus();
      } else if (evt.key === "Home") {
        evt.preventDefault();
        items[0]?.focus();
      } else if (evt.key === "End") {
        evt.preventDefault();
        items[items.length - 1]?.focus();
      } else if (evt.key === "Tab") {
        setTimeout(() => {
          const active = document.activeElement as HTMLElement | null;
          if (active && !freshMenu.contains(active)) {
            closeDropdown();
          }
        }, 0);
      } else if (evt.key === "Escape") {
        evt.preventDefault();
        closeDropdown();
      }
    });

    function openDropdown() {
      if (!freshMenu || !freshButton || !freshIcon) return;
      freshMenu.classList.remove("hidden");
      freshButton.setAttribute("aria-expanded", "true");
      freshIcon.style.transform = "rotate(180deg)";
      setTimeout(focusFirstItem, 0);
    }

    function closeDropdown(returnFocus: boolean = true) {
      if (!freshMenu || !freshButton || !freshIcon) return;
      freshMenu.classList.add("hidden");
      freshButton.setAttribute("aria-expanded", "false");
      freshIcon.style.transform = "rotate(0deg)";
      if (returnFocus) freshButton.focus();
    }

    function getMenuItems(): HTMLElement[] {
      const menu = document.getElementById("blog-dropdown-menu");
      if (!menu) return [];
      return Array.from(menu.querySelectorAll('[role="menuitem"]')) as HTMLElement[];
    }

    function focusFirstItem() {
      const items = getMenuItems();
      items[0]?.focus();
    }
  }

  document.addEventListener("astro:page-load", initBlogDropdown);

  if (document.readyState !== "loading") {
    initBlogDropdown();
  }
</script>
